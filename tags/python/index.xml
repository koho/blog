<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Xhat Blog</title><link>https://blog.xhat.io/tags/python/</link><description>Recent content in Python on Xhat Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 09 Jun 2021 18:27:39 +0800</lastBuildDate><atom:link href="https://blog.xhat.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 进行 ARP 欺骗</title><link>https://blog.xhat.io/posts/python-arpspoof/</link><pubDate>Wed, 09 Jun 2021 18:27:39 +0800</pubDate><guid>https://blog.xhat.io/posts/python-arpspoof/</guid><description>声明：本文所用的脚本仅限于学习测试目的，在使用中造成的一切后果与作者无关，后果自负。
ARP (Address Resolution Protocol) 即地址解析协议，是一种将 IP 地址转化成物理地址的协议。我们常用的以太网是通过 MAC 地址进行通信的，所以在网络链路上传送数据帧时，最终是使用硬件地址的。
一个典型的 ARP 流程如下表所示，这里为了叙述方便，硬件地址做了简化处理。
源地址 目的地址 内容 12:34:56 ff:ff:ff Who has 192.168.1.2? Tell 192.168.1.3 78:ab:cd 12:34:56 192.168.1.2 is at 78:ab:cd 大致流程就是12:34:56发送一个广播，问谁有某个 IP 地址，当对方收到这个广播时，如果自己的 IP 和广播里问的 IP 是一致的，就发送一个回复给提问者。这样提问者就建立了 IP 地址和物理地址的对应关系。
那如果对方不守信呢，明明自己没有这个 IP，还是坚持回复这个 IP 是自己，欺骗了提问者。这时提问者就会把数据包发给其他人，相当于数据包被人偷了！
没错，ARP 欺骗就是这个原理，可以用来做中间人攻击和拒绝服务攻击。下面分别实验一下两种情况。
网关 IP：10.1.45.254
受害者 IP：10.1.45.2
中间人攻击 欺骗受害者网关在我们这里，受害者就会把数据包发给我们，我们再代为转发给真正的网关，相当于做了一个中间人，这时我们可以捕获到受害者的通信数据包。
# arpspoof.py import sys from scapy.layers.l2 import Ether, ARP, sendp from scapy.layers.l2 import getmacbyip if __name__ == &amp;#39;__main__&amp;#39;: if len(sys.</description></item><item><title>Python 发送 Email 通知</title><link>https://blog.xhat.io/posts/python-send-email/</link><pubDate>Tue, 20 Apr 2021 01:36:21 +0800</pubDate><guid>https://blog.xhat.io/posts/python-send-email/</guid><description>感觉没什么好说的，代码看一眼就明了，当备忘吧。
import smtplib from email.header import Header from email.mime.text import MIMEText from email.utils import formataddr def send_email(subject, text, receiver): message = MIMEText(text, &amp;#39;plain&amp;#39;, &amp;#39;utf-8&amp;#39;) message[&amp;#39;From&amp;#39;] = formataddr((&amp;#34;发送人名字&amp;#34;, &amp;#39;发送人账号&amp;#39;)) message[&amp;#39;To&amp;#39;] = formataddr((&amp;#34;&amp;#34;, receiver)) message[&amp;#39;Subject&amp;#39;] = Header(subject, &amp;#39;utf-8&amp;#39;) smtp = smtplib.SMTP_SSL(&amp;#34;SMTP 服务器&amp;#34;, 465) smtp.login(&amp;#34;发送人账号&amp;#34;, &amp;#34;客户端密码&amp;#34;) smtp.sendmail(&amp;#39;发送人账号&amp;#39;, receiver, message.as_string()) smtp.quit()</description></item></channel></rss>