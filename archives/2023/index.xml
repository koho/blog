<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023 on X̂ Blog</title><link>https://blog.xhat.org/archives/2023/</link><description>Recent content in 2023 on X̂ Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 19 Sep 2023 23:34:26 +0800</lastBuildDate><atom:link href="https://blog.xhat.org/archives/2023/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenSSL 生成自签名证书</title><link>https://blog.xhat.org/posts/openssl-self-signed/</link><pubDate>Tue, 19 Sep 2023 23:34:26 +0800</pubDate><guid>https://blog.xhat.org/posts/openssl-self-signed/</guid><description>免费证书有效期一般较短，当服务器较多时，每个服务器都要安装脚本更新证书，管理起来比较麻烦。而合理使用自签名证书（比如测试或者非公开环境）也是不错的替代选择。
生成 CA 根证书 CA (Certificate Authority) 被称为证书授权中心，是数字证书发放和管理的机构。
根证书是 CA 认证中心给自己颁发的证书，是信任链的起始点。安装根证书意味着对这个 CA 认证中心的信任。
生成私钥 可以选择以下任何一种算法：
椭圆曲线（ECC）：
openssl ecparam -genkey -name secp384r1 -out ca.key 若需要加密私钥：
openssl ecparam -genkey -name secp384r1 | openssl ec -aes256 -out ca.key 其中 -name 参数指定使用的曲线，曲线名称可通过以下命令查看：
openssl ecparam -list_curves RSA：
openssl genrsa -out ca.key 4096 若需要加密私钥：
openssl genrsa -des3 -out ca.key 4096 生成根证书 使用上面的私钥生成一个证书，证书会包含一些组织信息和公钥。为了一劳永逸有效期自然越长越好，本例设置为 73000 天（20 年）。
如果是 RSA，可以使用 -sha256 签名。
openssl req -key ca.key -new -x509 -days 73000 -sha384 -subj &amp;#34;/C=CN/ST=Guangdong Province/L=Shenzhen/O=Shenzhen XXX Co.</description></item><item><title>获取 TCP 发送缓冲区信息</title><link>https://blog.xhat.org/posts/tcp-send-buffer/</link><pubDate>Thu, 04 May 2023 16:37:47 +0800</pubDate><guid>https://blog.xhat.org/posts/tcp-send-buffer/</guid><description>在大多数的网络编程情况下，是不需要特意关心 TCP 的缓冲区信息的。但在一些工业应用场景，如 RS485 转网口的数据采集，半双工的 485 不能同时进行读和写，这就要求 TCP 确认发送完一个指令后，才能发第二条。因为是总线网络，同时发送多条指令，对端回复数据将出现错乱。
当应用程序往套接字写入数据时，实际上只是写入了内核的发送缓冲区，接收方什么时候能收到报文是个未知数。
因此在某些需要同步状态的地方，发送方最好能确认对方收到报文后再做下一步动作。
Linux Linux 提供了 ioctl(fd, SIOCOUTQ, &amp;amp;count) 方法来查询一个套接字是否有未发送完成的数据。
SIOCOUTQ Returns the amount of unsent data in the socket send queue. The socket must not be in LISTEN state, otherwise an error (EINVAL) is returned. SIOCOUTQ is defined in &amp;lt;linux/sockios.h&amp;gt;. Alternatively, you can use the synonymous TIOCOUTQ, defined in &amp;lt;sys/ioctl.h&amp;gt;.
发送方可以使用这个方法来判断对端是否收到报文。以 Go 为例：
import ( &amp;#34;net&amp;#34; &amp;#34;golang.org/x/sys/unix&amp;#34; &amp;#34;unsafe&amp;#34; ) func getSendQueueLength(conn *net.</description></item></channel></rss>